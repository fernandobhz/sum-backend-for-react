{"version":3,"sources":["config/servicesUrl.js","App.js","reportWebVitals.js","index.js"],"names":["process","REACT_APP_SUM_SERVICE_URL","App","useState","a","setA","b","setB","resultado","setResultado","type","value","onChange","event","target","readOnly","onClick","axios","post","then","data","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6OACkFA,qRAAnEC,0B,uBCsDAC,MAlDf,WACE,MAAkBC,mBAAS,GAA3B,mBAAOC,EAAP,KAAUC,EAAV,KACA,EAAkBF,mBAAS,GAA3B,mBAAOG,EAAP,KAAUC,EAAV,KACA,EAAkCJ,mBAAS,IAA3C,mBAAOK,EAAP,KAAkBC,EAAlB,KAMA,OACE,iDACW,uBAAOC,KAAK,OAAOC,MAAOP,EAAGQ,SAAU,SAACC,GAAD,OAAWR,EAAKQ,EAAMC,OAAOH,UAD/E,YAEW,uBAAOD,KAAK,OAAOC,MAAOL,EAAGM,SAAU,SAACC,GAAD,OAAWN,EAAKM,EAAMC,OAAOH,UAF/E,cAGa,uBAAOD,KAAK,OAAOC,MAAOH,EAAYO,UAAQ,IACzD,wBAAQC,QATS,WACnBC,IAAMC,KAAN,UDT0DlB,wBCS1D,QAAoC,CAAEI,IAAGE,MAAKa,MAAK,gBAAGC,EAAH,EAAGA,KAAH,OAAcX,EAAaW,OAQ5E,0BCPSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBJ,MAAK,YAAkD,IAA/CK,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.c6516d75.chunk.js","sourcesContent":["export const { REACT_APP_CURRENT_DATE_TIME_SERVICE_URL: currentDateTimeServiceUrl } = process.env;\nexport const { REACT_APP_SUM_SERVICE_URL: sumServiceUrl = `http://google.com` } = process.env;\nexport const { REACT_APP_CALC_SERVICE_URL: calcServiceUrl } = process.env;","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport { calcServiceUrl } from \"./config/servicesUrl\";\nimport axios from \"axios\";\n\nfunction App() {\n  const [a, setA] = useState(5);\n  const [b, setB] = useState(3);\n  const [resultado, setResultado] = useState(``);\n\n  const calcularSoma = () => {\n    axios.post(`${calcServiceUrl}/sum`, { a, b }).then(({ data }) => setResultado(data));\n  };\n\n  return (\n    <>\n      Valor A: <input type=\"text\" value={a} onChange={(event) => setA(event.target.value)} />\n      Valor B: <input type=\"text\" value={b} onChange={(event) => setB(event.target.value)} />\n      Resultado: <input type=\"text\" value={resultado}  readOnly />\n      <button onClick={calcularSoma}>Calcular</button>\n    </>\n  );\n}\n\n/*\nconst fetchJson = (...args) => fetch(...args).then((response) => response.json());\n\n\nfunction DataHoraAtual() {\n  const [horaAtual, setHoraAtual] = useState(`clique no botão para puxar a data hora atual.`);\n\n  const pegarDoBackendDataHoraAtual = () =>\n    fetchJson(currentDateTimeServiceUrl).then(setHoraAtual);\n\n  return (\n    <div>\n      A hora atual é '{horaAtual}', <button onClick={pegarDoBackendDataHoraAtual}>atualizar hora</button>\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <>\n      <DataHoraAtual />\n      <DataHoraAtual />\n      <DataHoraAtual />\n      <DataHoraAtual />\n      <DataHoraAtual />\n    </>\n  );\n}\n\n*/\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}